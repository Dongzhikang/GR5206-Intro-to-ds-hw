mutate(g_over_f = map2(width,sample,function(width, sample) g(sample) / dunif(sample, 2 - width/2, 2 + width/2)))%>%
transmute(mean = map_dbl(g_over_f,mean),
se = map_dbl(g_over_f,~sd(.x)/sqrt(n)))%>%
mutate(lower = mean-1.96*se,
upper= mean+1.96*se)
result2
subsamples <- tribble(~width,~uniform,
width, map(width,generate_sample))
subsamples
#    3 0.0606 0.000341 0.0599 0.0613
#    4 0.0605 0.000348 0.0598 0.0612
#    5 0.0604 0.000354 0.0597 0.0611
#    6 0.0604 0.000361 0.0597 0.0611
#    7 0.0604 0.000368 0.0597 0.0611
#    8 0.0604 0.000374 0.0597 0.0611
#    9 0.0603 0.000380 0.0596 0.0611
#    10 0.0604 0.000386 0.0596 0.0612
#    # … with 191 more rows
## Do not modify this line!
width <- seq(.1,3,by=1e-2)
#    3 0.0606 0.000341 0.0599 0.0613
#    4 0.0605 0.000348 0.0598 0.0612
#    5 0.0604 0.000354 0.0597 0.0611
#    6 0.0604 0.000361 0.0597 0.0611
#    7 0.0604 0.000368 0.0597 0.0611
#    8 0.0604 0.000374 0.0597 0.0611
#    9 0.0603 0.000380 0.0596 0.0611
#    10 0.0604 0.000386 0.0596 0.0612
#    # … with 191 more rows
## Do not modify this line!
width <- seq(.1,3,by=1e-1)
#    3 0.0606 0.000341 0.0599 0.0613
#    4 0.0605 0.000348 0.0598 0.0612
#    5 0.0604 0.000354 0.0597 0.0611
#    6 0.0604 0.000361 0.0597 0.0611
#    7 0.0604 0.000368 0.0597 0.0611
#    8 0.0604 0.000374 0.0597 0.0611
#    9 0.0603 0.000380 0.0596 0.0611
#    10 0.0604 0.000386 0.0596 0.0612
#    # … with 191 more rows
## Do not modify this line!
width <- seq(.1,3,by=1e-2)
#    3 0.0606 0.000341 0.0599 0.0613
#    4 0.0605 0.000348 0.0598 0.0612
#    5 0.0604 0.000354 0.0597 0.0611
#    6 0.0604 0.000361 0.0597 0.0611
#    7 0.0604 0.000368 0.0597 0.0611
#    8 0.0604 0.000374 0.0597 0.0611
#    9 0.0603 0.000380 0.0596 0.0611
#    10 0.0604 0.000386 0.0596 0.0612
#    # … with 191 more rows
## Do not modify this line!
width <- seq(.1,3,length.out = 201)
width <- seq(.1,3,length.out = 201)
generate_sample <- function(w, seed = 0, n = 1e4){
set.seed(seed)
runif(n, 2-w/2,2+w/2)
}
result2 <- tribble(~width,~sample,
width, map(width,generate_sample))%>%
unnest(c(width,sample))%>%
mutate(g_over_f = map2(width,sample,function(width, sample) g(sample) / dunif(sample, 2 - width/2, 2 + width/2)))%>%
transmute(mean = map_dbl(g_over_f,mean),
se = map_dbl(g_over_f,~sd(.x)/sqrt(n)))%>%
mutate(lower = mean-1.96*se,
upper= mean+1.96*se)
result2
#    3 0.0606 0.000341 0.0599 0.0613
#    4 0.0605 0.000348 0.0598 0.0612
#    5 0.0604 0.000354 0.0597 0.0611
#    6 0.0604 0.000361 0.0597 0.0611
#    7 0.0604 0.000368 0.0597 0.0611
#    8 0.0604 0.000374 0.0597 0.0611
#    9 0.0603 0.000380 0.0596 0.0611
#    10 0.0604 0.000386 0.0596 0.0612
#    # … with 191 more rows
## Do not modify this line!
width <- seq(.1,2,by=1e-2)
#    3 0.0606 0.000341 0.0599 0.0613
#    4 0.0605 0.000348 0.0598 0.0612
#    5 0.0604 0.000354 0.0597 0.0611
#    6 0.0604 0.000361 0.0597 0.0611
#    7 0.0604 0.000368 0.0597 0.0611
#    8 0.0604 0.000374 0.0597 0.0611
#    9 0.0603 0.000380 0.0596 0.0611
#    10 0.0604 0.000386 0.0596 0.0612
#    # … with 191 more rows
## Do not modify this line!
width <- seq(.1,2.1,by=1e-2)
width <- seq(.1,2.1,by=1e-2)
generate_sample <- function(w, seed = 0, n = 1e4){
set.seed(seed)
runif(n, 2-w/2,2+w/2)
}
result2 <- tribble(~width,~sample,
width, map(width,generate_sample))%>%
unnest(c(width,sample))%>%
mutate(g_over_f = map2(width,sample,function(width, sample) g(sample) / dunif(sample, 2 - width/2, 2 + width/2)))%>%
transmute(mean = map_dbl(g_over_f,mean),
se = map_dbl(g_over_f,~sd(.x)/sqrt(n)))%>%
mutate(lower = mean-1.96*se,
upper= mean+1.96*se)
result2
width <- seq(1,3,by=1e-2)
generate_sample <- function(w, seed = 0, n = 1e4){
set.seed(seed)
runif(n, 2-w/2,2+w/2)
}
result2 <- tribble(~width,~sample,
width, map(width,generate_sample))%>%
unnest(c(width,sample))%>%
mutate(g_over_f = map2(width,sample,function(width, sample) g(sample) / dunif(sample, 2 - width/2, 2 + width/2)))%>%
transmute(mean = map_dbl(g_over_f,mean),
se = map_dbl(g_over_f,~sd(.x)/sqrt(n)))%>%
mutate(lower = mean-1.96*se,
upper= mean+1.96*se)
result2
subsamples <- tribble(~width,~uniform,
width, map(width,generate_sample))
subsamples
subsamples <- tribble(~width,~uniform,
width, generate_sample(width))
subsamples
subsamples <- tribble(~width,~uniform,
width, generate_sample(width))%>%
unnest(width,uniform)
subsamples
subsamples <- tribble(~width,~uniform,
width, map(width,generate_sample))
subsamples
library(tidyverse)
df <- read_csv("data/patch.csv")%>%
transmute(z = oldpatch-placebo, y = newpatch-oldpatch)
df
ratio <- function(df) mean(df$y)/mean(df$z)
theta_hat <- ratio(df)
#          You may use `map()` here.
#        - The third column is called `theta_hat_b`. This column stores
#          ratios of each sample in `df_b`.
#      - `pull()` to pull out `theta_hat_b` from the tibble.
#    (e.g. set seed as 1, let `df` be `c(y = c(7.06, 4.06), z = c(1.48, 6.18))`,
#    `nboot = 2`, `boot_ratio(nboot, df)` prints to:
#    [1] 0.6567138 1.4521353
#    )
#
## Do not modify this line!
boot_df <- function(df) sample_frac(df,replace = T)
boot_df(c(y = c(7.06, 4.06), z = c(1.48, 6.18)))
boot_ratio(2,df)
ratio <- function(df) mean(df$y)/mean(df$z)
theta_hat <- ratio(df)
#          You may use `map()` here.
#        - The third column is called `theta_hat_b`. This column stores
#          ratios of each sample in `df_b`.
#      - `pull()` to pull out `theta_hat_b` from the tibble.
#    (e.g. set seed as 1, let `df` be `c(y = c(7.06, 4.06), z = c(1.48, 6.18))`,
#    `nboot = 2`, `boot_ratio(nboot, df)` prints to:
#    [1] 0.6567138 1.4521353
#    )
#
## Do not modify this line!
boot_df <- function(df) sample_frac(df,replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,boot_df), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
View(df)
length(df)
nrow(df)
#          You may use `map()` here.
#        - The third column is called `theta_hat_b`. This column stores
#          ratios of each sample in `df_b`.
#      - `pull()` to pull out `theta_hat_b` from the tibble.
#    (e.g. set seed as 1, let `df` be `c(y = c(7.06, 4.06), z = c(1.48, 6.18))`,
#    `nboot = 2`, `boot_ratio(nboot, df)` prints to:
#    [1] 0.6567138 1.4521353
#    )
#
## Do not modify this line!
boot_df <- function(df) sample_frac(df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,boot_df), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
boot_df <- function(df) sample_frac(tbl=df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,boot_df), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
boot_df <- function(df) sample_frac(tbl=df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,~boot_df()), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
boot_df <- function(df) sample_frac(tbl=df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,~boot_df(df)), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
boot_df <- function(df) sample_frac(df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,boot_df, df=df), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
#          You may use `map()` here.
#        - The third column is called `theta_hat_b`. This column stores
#          ratios of each sample in `df_b`.
#      - `pull()` to pull out `theta_hat_b` from the tibble.
#    (e.g. set seed as 1, let `df` be `c(y = c(7.06, 4.06), z = c(1.48, 6.18))`,
#    `nboot = 2`, `boot_ratio(nboot, df)` prints to:
#    [1] 0.6567138 1.4521353
#    )
#
## Do not modify this line!
boot_df <- function(df) sample_frac(df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,~boot_df(df)), theta_hat_b = map(df_b,ratio)),theta_hat_b)
}
boot_ratio(2,df)
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
#          You may use `map()` here.
#        - The third column is called `theta_hat_b`. This column stores
#          ratios of each sample in `df_b`.
#      - `pull()` to pull out `theta_hat_b` from the tibble.
#    (e.g. set seed as 1, let `df` be `c(y = c(7.06, 4.06), z = c(1.48, 6.18))`,
#    `nboot = 2`, `boot_ratio(nboot, df)` prints to:
#    [1] 0.6567138 1.4521353
#    )
#
## Do not modify this line!
boot_df <- function(df) sample_frac(df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,~boot_df(df)), theta_hat_b = retio(df_b)),theta_hat_b)
}
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,~boot_df(df)), theta_hat_b = ratio(df_b)),theta_hat_b)
}
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
boot_df <- function(df) sample_frac(df,length(df),replace = T)
boot_ratio <- function(nboot, df){
pull(tibble(b = 1:nboot, df_b = map(b,~boot_df(df)), theta_hat_b = ratio(df_b)),theta_hat_b)
}
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
boot_ratio <- function(nboot, df){
tibble(b = 1:nboot, df_b = map(b,~boot_df(df)))%>%
mutate(theta_b_hat <- ratio(df_b))%>%
pull(theta_b_hat)
}
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
boot_ratio <- function(nboot, df){
tibble(b = 1:nboot, df_b = map(b,~boot_df(df)))%>%
mutate(theta_b_hat <- map(df_b,ratio(df_b)))%>%
pull(theta_b_hat)
}
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
boot_df <- function(df) sample_frac(df,replace = T)
boot_ratio <- function(nboot, df){
unlist(pull(tibble(b = 1:nboot, df_b = map(b,~boot_df(df)), theta_hat_b = map(df_b,ratio)),theta_hat_b))
}
set.seed(1)
boot_ratio(2,tibble(y=c(7.06,4.06), z=c(1.48,6.18)))
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df),
bias = theta_hat_b-theta_hat,
theta_hat_corrected = theta_hat-bias,
type = "normal")%>%
select(-theta_hat_b)
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df),
bias = unlist(theta_hat_b)-theta_hat,
theta_hat_corrected = theta_hat-bias,
type = "normal")%>%
select(-theta_hat_b)
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df))
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df))%>%
unnest(theta_hat_b)
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df))%>%
unnest(theta_hat_b)%>%
mutate(bias = theta_hat_b-theta_hat,
theta_hat_corrected = theta_hat-bias,
type = "normal")%>%
select(-theta_hat_b)
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df))%>%
unnest(theta_hat_b)%>%
mutate(bias = theta_hat_b-theta_hat,
theta_hat_corrected = theta_hat-bias,
type = "normal")%>%
dplyr::select(-theta_hat_b)
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df))%>%
mutate(bias = mean(theta_hat_b)-theta_hat,
theta_hat_corrected = theta_hat-bias,
type = "normal")%>%
dplyr::select(-theta_hat_b)
results
set.seed(1)
seed1 <- .Random.seed
results <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_b = map(nboot,boot_ratio, df=df))%>%
mutate(bias = unlist(map(theta_hat_b,mean))-theta_hat,
theta_hat_corrected = theta_hat-bias,
type = "normal")%>%
dplyr::select(-theta_hat_b)
results
rmean <- function(p, x) sum(product(p),)/length(x)
rratio <- function(p, df) rmean(p,df$y)/rmean(p,df$z)
rratio(p, df)
rmean <- function(p, x) sum(prod(p),)/length(x)
rratio <- function(p, df) rmean(p,df$y)/rmean(p,df$z)
rratio(p, df)
mean_p <- function(p) reduce(p,`+`)/length(p)
set.seed(1)
seed2 <- .Random.seed
results2 <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_p_hat = map(nboot, boot_ratio2, df=df))%>%
unnest(theta_hat_p_hat)%>%
mutate(theta_hat = map_dbl(p_hat_b, rratio, df=df),
bias = unlist(map(theta_hat_b,mean))-theta_hat,
theta_hat_corrected = theta-bias,
type="improved")
boot_ratio2 <- function(nboot,df){
tibble(b = 1:nboot, df_b = map(b, ~boot_p_ratio(df)))%>%
unnest(df_b)%>%
summarize(theta_hat_b = mean(theta),
p_hat_b = list(mean_p(p)))
}
set.seed(1)
seed2 <- .Random.seed
results2 <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_p_hat = map(nboot, boot_ratio2, df=df))%>%
unnest(theta_hat_p_hat)%>%
mutate(theta_hat = map_dbl(p_hat_b, rratio, df=df),
bias = unlist(map(theta_hat_b,mean))-theta_hat,
theta_hat_corrected = theta-bias,
type="improved")
source('~/Documents/CU 2019 Fall/Intro to DS/GR5206-Intro-to-ds-hw/HW10/hw10_bias_correction.R')
source('~/Documents/CU 2019 Fall/Intro to DS/GR5206-Intro-to-ds-hw/HW10/hw10_bias_correction.R')
g1 <- bind_rows(results2,results)%>%
ggplot()+
geom_line(aes(bias,nboot,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")
g1
source('~/Documents/CU 2019 Fall/Intro to DS/GR5206-Intro-to-ds-hw/HW10/hw10_bias_correction.R')
source('~/Documents/CU 2019 Fall/Intro to DS/GR5206-Intro-to-ds-hw/HW10/hw10_bias_correction.R')
#     To do this, you can use:
#       - `bind_rows()` to bind `results2` to `results`
#       - `ggplot()` to plot the `bias` vs. `nboot`, colored by `type`.
#       - `geom_line()` to draw to lines.
#       - `labs()` to name the title as `"The bias of improved method converge faster than that of the normal method"`,
#         x-axis as `"Nboot"`,
#         y-axis as `"Bias"`,
#         color as `Type`.
#     Store returned graph to `g1`.
## Do not modify this line!
g1 <- bind_rows(results2,results)%>%
ggplot()+
geom_line(aes(bias,nboot,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")+
theme_light()
#     To do this, you can use:
#       - `bind_rows()` to bind `results2` to `results`
#       - `ggplot()` to plot the `bias` vs. `nboot`, colored by `type`.
#       - `geom_line()` to draw to lines.
#       - `labs()` to name the title as `"The bias of improved method converge faster than that of the normal method"`,
#         x-axis as `"Nboot"`,
#         y-axis as `"Bias"`,
#         color as `Type`.
#     Store returned graph to `g1`.
## Do not modify this line!
g1 <- bind_rows(results2,results)%>%
ggplot()+
geom_line(aes(bias,nboot,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")+
theme_light()
g1
set.seed(1)
seed2 <- .Random.seed
results2 <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_p_hat = map(nboot, boot_ratio2, df=df))%>%
unnest(theta_hat_p_hat)%>%
mutate(theta_hat = map_dbl(p_hat_b, rratio, df=df),
bias = unlist(map(theta_hat_b,mean))-theta_hat,
theta_hat_corrected = theta_hat-bias,
type="improved")%>%
select(nboot,bias, theta_hat_corrected, type)
set.seed(1)
seed2 <- .Random.seed
results2 <- tibble(nboot = c(50, 100, 200, 500, 1000),
theta_hat_p_hat = map(nboot, boot_ratio2, df=df))%>%
unnest(theta_hat_p_hat)%>%
mutate(theta_hat = map_dbl(p_hat_b, rratio, df=df),
bias = unlist(map(theta_hat_b,mean))-theta_hat,
theta_hat_corrected = theta_hat-bias,
type="improved")%>%
dplyr::select(nboot,bias, theta_hat_corrected, type)
#     To do this, you can use:
#       - `bind_rows()` to bind `results2` to `results`
#       - `ggplot()` to plot the `bias` vs. `nboot`, colored by `type`.
#       - `geom_line()` to draw to lines.
#       - `labs()` to name the title as `"The bias of improved method converge faster than that of the normal method"`,
#         x-axis as `"Nboot"`,
#         y-axis as `"Bias"`,
#         color as `Type`.
#     Store returned graph to `g1`.
## Do not modify this line!
g1 <- bind_rows(results2,results)%>%
ggplot()+
geom_line(aes(bias,nboot,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")+
theme_light()
g1
#     To do this, you can use:
#       - `bind_rows()` to bind `results2` to `results`
#       - `ggplot()` to plot the `bias` vs. `nboot`, colored by `type`.
#       - `geom_line()` to draw to lines.
#       - `labs()` to name the title as `"The bias of improved method converge faster than that of the normal method"`,
#         x-axis as `"Nboot"`,
#         y-axis as `"Bias"`,
#         color as `Type`.
#     Store returned graph to `g1`.
## Do not modify this line!
g1 <- bind_rows(results2,results)%>%
ggplot()+
geom_line(aes(nboot,bias,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")+
theme_light()
g1
#     To do this, you can use:
#       - `bind_rows()` to bind `results2` to `results`
#       - `ggplot()` to plot the `bias` vs. `nboot`, colored by `type`.
#       - `geom_line()` to draw to lines.
#       - `labs()` to name the title as `"The bias of improved method converge faster than that of the normal method"`,
#         x-axis as `"Nboot"`,
#         y-axis as `"Bias"`,
#         color as `Type`.
#     Store returned graph to `g1`.
## Do not modify this line!
g1 <- bind_rows(results,results2)%>%
ggplot()+
geom_line(aes(nboot,bias,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")+
theme_light()
g1
#     To do this, you can use:
#       - `bind_rows()` to bind `results2` to `results`
#       - `ggplot()` to plot the `bias` vs. `nboot`, colored by `type`.
#       - `geom_line()` to draw to lines.
#       - `labs()` to name the title as `"The bias of improved method converge faster than that of the normal method"`,
#         x-axis as `"Nboot"`,
#         y-axis as `"Bias"`,
#         color as `Type`.
#     Store returned graph to `g1`.
## Do not modify this line!
g1 <- bind_rows(results,results2)%>%
ggplot()+
geom_line(aes(nboot,bias,color=type))+
labs(title = "The bias of improved method converge faster than that of the normal method",
x="Nboot",
y="Bias",
color="Type")+
theme_light()+
theme(plot.title = element_text(hjust = .5))
g1
